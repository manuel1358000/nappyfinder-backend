AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'NappyFinderApp

  Functions supporting the Patient Info Domain

  '
Parameters:
  StageName:
    Type: String
    Default: dev
    Description: The stage name for API Gateway (e.g. dev, qa, staging, production)
Resources:
  NappyFinderApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName:
        Ref: StageName
      Name: Patient Info API
      DefinitionBody:
        swagger: '2.0'
        info:
          title: NappyFinder API
          version: '1.0'
        securityDefinitions:
          LambdaAuthorizer:
            type: apiKey
            name: Authorization
            in: header
            x-amazon-apigateway-authtype: custom
            x-amazon-apigateway-authorizer:
              authorizerResultTtlInSeconds: 300
              identitySource: method.request.header.Authorization
              authorizerCredentials:
                Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/API_Gateway_Access_Role
              authorizerUri:
                Fn::Sub:
                - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Auth_Function}/invocations
                - Auth_Function:
                    Fn::ImportValue: api-gateway-authorizer-function-arn
        paths:
          /user/profile/{userProfileId}:
            get:
              security:
              - LambdaAuthorizer: []
              responses:
                '200':
                  description: OK
              x-amazon-apigateway-integration:
                type: aws_proxy
                httpMethod: POST
                passthroughBehavior: when_no_match
                credentials:
                  Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/API_Gateway_Access_Role
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NappyFinderGetUserProfileFunction.Arn}/invocations
            options:
              responses:
                '200':
                  description: OK
              x-amazon-apigateway-integration:
                type: aws_proxy
                httpMethod: POST
                passthroughBehavior: when_no_match
                credentials:
                  Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/API_Gateway_Access_Role
                uri:
                  Fn::Sub:
                  - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CORS_Function}/invocations
                  - CORS_Function:
                      Fn::ImportValue: api-gateway-cors-arn
          /user/profile:
            post:
              security:
              - LambdaAuthorizer: []
              responses:
                '200':
                  description: OK
              x-amazon-apigateway-integration:
                type: aws_proxy
                httpMethod: POST
                passthroughBehavior: when_no_match
                credentials:
                  Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/API_Gateway_Access_Role
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NappyFinderPostUserProfileFunction.Arn}/invocations
            options:
              responses:
                '200':
                  description: OK
              x-amazon-apigateway-integration:
                type: aws_proxy
                httpMethod: POST
                passthroughBehavior: when_no_match
                credentials:
                  Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/API_Gateway_Access_Role
                uri:
                  Fn::Sub:
                  - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CORS_Function}/invocations
                  - CORS_Function:
                      Fn::ImportValue: api-gateway-cors-arn
  NappyFinderGetUserProfileFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
      SamResourceId: NappyFinderGetUserProfileFunction
    Properties:
      FunctionName:
        Fn::Sub: nappyfinder-get-user-profile-function-${StageName}
      CodeUri: NappyFinderGetUserProfileFunction
      Handler: bootstrap
      Runtime: provided.al2023
      Architectures:
      - arm64
      Environment:
        Variables:
          LOG_LEVEL:
            Ref: LogLevel
          IS_LOCAL: true
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: UserProfileTable
  NappyFinderPostUserProfileFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
      SamResourceId: NappyFinderPostUserProfileFunction
    Properties:
      FunctionName:
        Fn::Sub: nappyfinder-post-user-profile-function-${StageName}
      CodeUri: NappyFinderPostUserProfileFunction
      Handler: bootstrap
      Runtime: provided.al2023
      Architectures:
      - arm64
      Environment:
        Variables:
          LOG_LEVEL:
            Ref: LogLevel
          IS_LOCAL: true
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: UserProfileTable
  UserProfileTable:
    Type: AWS::DynamoDB::Table
    Properties:
      Tags:
      - Key: billingTag
        Value: nappyfinder-functions
      KeySchema:
      - AttributeName: PK
        KeyType: HASH
      - AttributeName: SK
        KeyType: RANGE
      AttributeDefinitions:
      - AttributeName: PK
        AttributeType: S
      - AttributeName: SK
        AttributeType: S
      BillingMode: PAY_PER_REQUEST
      TableName:
        Fn::Sub: UserProfileTable-${StageName}
